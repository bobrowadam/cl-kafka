(defpackage #:cl-kafka
  (:use #:cl #:cl-kafka-encoder #:cl-kafka-decoder)
  (:export :meta-data))
(in-package #:cl-kafka)

(defclass broker ()
  ((id :accessor id :initarg :id)
   (host :accessor host :initarg :host)
   (port :accessor port :initarg :port)))

(defun broker (stream)
  (let* ((id (read-int32 stream))
         (host (read-string stream))
         (port (read-int32 stream)))
    (make-instance 'broker :id id :host host :port port)))

(defun topics (stream)
  (let* ((size (read-int32 stream))
         (correlation-id (read-int32 stream))
         (brokers (read-array stream #'broker)))
    (values brokers)))

(defun meta-data (host port)
  (let* ((socket (usocket:socket-connect host port :element-type '(unsigned-byte 8)))
         (socket-stream (usocket:socket-stream socket))
         (api-key (int16 3))
         (api-version (int16 0))
         (correlation-id (int32 121))
         (client-id (astring "cl-kafka"))
         (topics (anarray '()))
         (message (concatenate 'vector api-key api-version correlation-id client-id topics)))
    (format t "Fetching metadata..")
    (write-sequence (concatenate 'vector (int32 (length message)) message) socket-stream)
    (force-output socket-stream)
    (format t "length")
    (topics socket-stream)))

