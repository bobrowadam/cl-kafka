(in-package #:cl-kafka)

(defmethod encode ((object meta-data-request) stream)
  (encode-int16 (api-key object) stream)
  (encode-int16 (api-version object) stream)
  (encode-int32 (correlation-id object) stream)
  (encode-string (client-id object) stream)
  (encode-array (topics object) stream))


(defmethod encode ((object produce-request) stream)
  (encode-int16 (api-key object) stream)
  (encode-int16 (api-version object) stream)
  (encode-int32 (correlation-id object) stream)
  (encode-string (client-id object) stream)
  (encode-int16 (required-acks object) stream)
  (encode-int32 (timeout object) stream)
  (encode-array (topic-payloads object) stream))

(defmethod encode ((object topic-payload) stream)
  (encode-string (topic-name object) stream)
  (encode-array (partition-payloads object) stream))

(defmethod encode ((object partition-payload) stream)
  (encode-int32 (partition object) stream)
  (let ((ims (flexi-streams:make-in-memory-output-stream)))
    (encode (message-set object) ims)
    (let ((ims-sequence (flexi-streams:get-output-stream-sequence ims)))
      (encode-int32 (length ims-sequence) stream)
      (write-sequence ims-sequence stream))))

(defmethod encode ((object message-set) stream)
  (encode-int64 (offset object) stream)
  (let ((ims (flexi-streams:make-in-memory-output-stream)))
    (encode (message object) ims)
    (let ((ims-sequence (flexi-streams:get-output-stream-sequence ims)))
      (encode-int32 (length ims-sequence) stream)
      (write-sequence ims-sequence stream))))

(defmethod encode ((object message) stream)
  (let ((ims (flexi-streams:make-in-memory-output-stream)))
    (encode-int8 (magic-byte object) ims)
    (encode-int8 (attributes object) stream)
    (encode-binary (key object) stream)
    (encode-binary (value object) stream)
    (let ((ims-sequence (flexi-streams:get-output-stream-sequence ims)))
      (encode-int32 (ironclad:octets-to-integer (ironclad:digest-sequence :crc32 ims-sequence)) stream)
      (write-sequence ims-sequence stream))))


